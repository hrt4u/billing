Новое
-------------

* Сцепил поля из таблиц с бизнес-логикой с помощью генерации типов, для того, что бы не писать кучу кастомных типов и что бы создавались валидаторы на основе данных о поле (длина для строки и кол-во знаков после запятой и денег и котировок)
* Котировки на сегоднящний день кешируются
* Декорированы вьюхи в aiohttp для валидации и обработки ошибок
* Поднял grpc-сервер который так же работает с той же бизнес-логикой (один метод без особой красоты - для примера). Поднимается python server_grpc.py, ткнуть в него можно с помощью python client_grpc.py. Ради этого и заморачивался с выделенной бизнес-логикой, в принципе можно было сделать простое решение с помощью marshmallow или вообще на Джанге (требуемые методы подходят под CRUD, но задумка была в другом, хотел сделать под разные протоколы, в реальной жизни конечно нужно обсуждать и понимать что и для чего мы делаем) :)
* Не долши руки до выгрузки отчетов все еще, на неделе можно исправить (сходу не помню, как красиво это сделать), работа не отпускает даже на выходных :)
* Спасибо за то, что уделяете мне время)

Основы архитектуры и стек
-------------

* aiohttp + gino + aioredis
* в db.py можно создать и удалить таблицы с помощью cli
* Бизнес-логика сделана на тайпах и датаклассах и хранится в billing/service_layers.py
* Есть небольшие тест-кейсы на pytest запускается 'pytest -vs'
* aiohttp работает через json / grpc-сервер через protobuf

Логика базы
-------------

* Модель User является одновременно единственным кошельком пользователя, нужно разбивать при масштабировании
* Город и страна пользователя хранятся как текстовые поля в User, для предзаполнения и валидации нужно создавать отдельные модели
* Все записи о транзакциях (депозиты и переводы) хранятся в модели Transactions
* После депозита или перевода пересчитываются балансы всех участвующих в них пользователей из всей истории транзакций
* В транзакции записываются суммы в валютах кошельков пользователя
* Все захардкожено settings.py для простоты (я сторонник использовать переменные окружения через os.getenv(...))
