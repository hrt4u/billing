Основы архитектуры и стек
-------------

* aiohttp + gino
* в db.py можно создать и удалить таблицы с помощью cli
* Бизнес-логика сделана на тайпах и датаклассах и хранится в billing/service_layers.py, что дает возможность подключить к этой же логике другой транспорт (сокеты, grpc)
* Есть небольшие тест-кейсы на pytest запускается 'pytest -vs'
* все работает через json

Логика базы
-------------

* Модель User является одновременно единственным кошельком пользователя, нужно разбивать при масштабировании
* Город и страна пользователя хранятся как текстовые поля в User, для предзаполнения и валидации нужно создавать отдельные модели
* Все записи о транзакциях (депозиты и переводы) хранятся в модели Transactions
* После депозита или перевода пересчитываются балансы всех участвующих в них пользователей из всей истории транзакций
* В транзакции записываются суммы в валютах кошельков пользователя
* db_url захордкожена в settings.py для простоты


TODO в порядке важности
-------------

* Сделать вывод репортов, а не только их запрос :)
* Переделать в views.py функцию для проверки наличия полей в входящем json в соответствии с датаклассом в декоратор
* Переписать загрузку котировок из чистого sql в алхимию
